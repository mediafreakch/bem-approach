"use strict";

var
  Promise = require('promise'),
  isFormValid = function(store){
    var
      state = store.state,
      inputs = state.forms[state.activeForm].inputs;

    for ( var key in inputs ) {
      if ( inputs.hasOwnProperty( key ) ) {
        if ( !inputs[ key ].isValid ) {
          return false;
        }
      }
    }
    return true
  },
  localizationActions = require('vuex_localization').actions;

module.exports = Object.assign(
  localizationActions,
  {
  setFormValidationState: function(store) {
    store.dispatch('SET_FORM_VALIDATION_STATE', isFormValid(store));
  },
  inputValueChanged: function(store, inputId, value, isValid) {
    return new Promise(function(resolve, reject) {
      try {
        store.dispatch('SET_INPUT_VALUE', inputId, value );
        store.dispatch('SET_INPUT_VALIDATION_STATE', inputId, isValid);
        store.dispatch('SET_FORM_VALIDATION_STATE', isFormValid(store));
        //store.dispatch('VALIDATE_ACTIVE_FORM');
        resolve();
      } catch ( err ) {
        reject( err );
      }
    });
  },
  setInputValidationState: function(store, formId, inputId, newState) {
    store.dispatch('SET_INPUT_VALIDATION_STATE', inputId, newState);
  },
  setInputValue: function(store, formId, inputId, newValue) {
    store.dispatch('SET_INPUT_VALUE', inputId, newValue);
  },
  setInputIsRetrievingDataState: function(store, inputId, newState) {
    store.dispatch('SET_INPUT_IS_RETRIEVING_DATA_STATE', inputId, newState);
  },
  setFormIsRetrievingDataState: function(store, newState) {
    store.dispatch('SET_FORM_IS_RETRIEVING_DATA_STATE', newState);
  },
  setLandline: function(store) {
    store.dispatch('SET_LANDLINE_STATE', true);
  },
  setMobile: function(store) {
    store.dispatch('SET_MOBILE_STATE', true);
  },
  setError: function(store, newMessage) {
    store.dispatch('SET_ERROR_STATE', true);
    store.dispatch('SET_ERROR_MESSAGE', newMessage);
  },
  setSmsRequestedStateTrue: function(store) {
    store.dispatch('SET_SMS_REQUESTED_STATE', true);
  },
  setAccountRestoredStateTrue: function(store) {
    store.dispatch('SET_ACCOUNT_RESTORED_STATE', true);
  },
  removeError: function(store) {
    store.dispatch('SET_ERROR_STATE', false);
  },
  setUserId: function(store, id) {
    store.dispatch('SET_USER_ID', id);
  },
  setPhonePart: function(store, phonePart) {
    store.dispatch('SET_PHONE_PART', phonePart);
  },
  setAuthyId: function(store, id) {
    store.dispatch('SET_AUTHY_ID', id);
  },
  setActiveForm: function(store, newForm) {
    store.dispatch('SET_ACTIVE_FORM', newForm);
  },
  setPassportImage: function(store, newImage) {
    store.dispatch('SET_PASSPORT_IMAGE', newImage);
  },
  setPassportSubmitted: function(store) {
    store.dispatch('SET_PASSPORT_SUBMITTED');
  },
  setImageLoaded: function(store) {
    store.dispatch('SET_IMAGE_LOADED');
  },
  setConfirmationEmailSent: function(store, newState) {
    store.dispatch('SET_CONFIRMATION_EMAIL_SENT', newState);
  },
  setTempToken: function(store, newToken) {
    store.dispatch('SET_TEMP_TOKEN', newToken);
  },
  setUserNewEmail: function(store, inputId, newEmail) {
    store.dispatch('SET_USER_NEW_EMAIL', newEmail);
  },
  setUserNewPassword: function(store, inputId, newPassword) {
    store.dispatch('SET_USER_NEW_PASSWORD', newPassword);
  },
  setUserPassword: function(store, inputId, password) {
    store.dispatch('SET_USER_PASSWORD', password);
  }
});