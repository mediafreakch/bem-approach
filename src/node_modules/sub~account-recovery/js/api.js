"use strict";

var handleErrorCase = require('app~utils').ajax.handleErrorCase;

module.exports = {
  retrieveMobilePart: function(ctx) {
    ctx.setInputIsRetrievingDataState('userOrEmail', true);
    ctx.removeError();
    return ctx.$http.get( 'http://localhost:3000/users/'+ encodeURI(ctx.user.id) + '/phone/get-mobile-part' )
               .then( function success ( response ) {
//            ctx.removeError();
                 ctx.setPhonePart(response.data.body.part);
                 if(response.data.body.landline) {
                   ctx.setLandline();
                   ctx.setInputIsRetrievingDataState('userOrEmail', false);
                   ctx.setActiveForm('formPassport');
                   this.$nextTick(function() {
                     document.getElementById('pass').focus();
                   })
                 } else {
                   ctx.setMobile();
                   ctx.setInputIsRetrievingDataState('userOrEmail', false);
                   ctx.setActiveForm('formRequestSms');
                 }
               }, function error ( response ) {
                 ctx.setPhonePart('');
                 handleErrorCase(ctx, response);
                 ctx.setInputIsRetrievingDataState('userOrEmail', false);
               });
  },
  requestSmsCode: function(ctx) {
    ctx.setFormIsRetrievingDataState(true);
    ctx.removeError();
    return ctx.$http.post( 'http://localhost:3000/users/'+ encodeURI(ctx.user.id) + '/phone/request-sms')
      .then ( function success (response) {
        ctx.setSmsRequestedStateTrue();
        ctx.setFormIsRetrievingDataState(false);
//            ctx.removeError();
        ctx.setAuthyId(response.data.body.authyId);
        ctx.setActiveForm('formVerify');
        ctx.$nextTick(function() {
          document.getElementById('verificationCode').focus();
        });
      }, function error (response) {
        ctx.setFormIsRetrievingDataState(false);
        handleErrorCase(ctx, response);
      });
  },
  verifySmsCode: function(ctx) {
    ctx.setFormIsRetrievingDataState(true);
    ctx.removeError();
    return ctx.$http.post( 'http://localhost:3000/users/'+ encodeURI(ctx.user.id) + '/phone/verify', {data: {authyId: ctx.user.authyId, authyToken: ctx.authyToken } })
      .then ( function success (response) {
        ctx.setFormIsRetrievingDataState(false);
  //          ctx.removeError();
        ctx.setActiveForm('formReCreateEmailAndPassword');
        ctx.$route.router.go( {
          name: 'account-recreate'
        } );
      }, function error (response) {
        ctx.setFormIsRetrievingDataState(false);
        handleErrorCase(ctx, response);
      });
  },
  sendPassportImage: function(ctx) {
    ctx.setFormIsRetrievingDataState(true);
    ctx.removeError();
    return ctx.$http.post('http://localhost:3000/users/' + encodeURI(ctx.user.id) + '/passport', {data: {img: encodeURI(ctx.passportImage)}})
      .then(function success ( response ) {
        ctx.setFormIsRetrievingDataState(false);
        ctx.setPassportSubmitted();
      }, function error ( response ) {
        ctx.setFormIsRetrievingDataState(false);
        handleErrorCase(ctx, response);
      });
  }
};